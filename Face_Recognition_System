import os
import cv2
import face_recognition
from flask import Flask, request, render_template_string, redirect, url_for, send_from_directory
import numpy as np

# -----------------------
# CONFIG
# -----------------------
KNOWN_FACES_DIR = "known_faces"
UPLOADS_DIR = "uploads"
RESULTS_DIR = "results"

os.makedirs(KNOWN_FACES_DIR, exist_ok=True)
os.makedirs(UPLOADS_DIR, exist_ok=True)
os.makedirs(RESULTS_DIR, exist_ok=True)

known_face_encodings = []
known_face_names = []

# -----------------------
# LOAD KNOWN FACES
# -----------------------
def load_known_faces():
    global known_face_encodings, known_face_names
    known_face_encodings = []
    known_face_names = []
    for person_name in os.listdir(KNOWN_FACES_DIR):
        person_dir = os.path.join(KNOWN_FACES_DIR, person_name)
        if not os.path.isdir(person_dir):
            continue
        for filename in os.listdir(person_dir):
            img_path = os.path.join(person_dir, filename)
            image = face_recognition.load_image_file(img_path)
            encodings = face_recognition.face_encodings(image)
            if encodings:
                known_face_encodings.append(encodings[0])
                known_face_names.append(person_name)
    print(f"[INFO] Loaded {len(known_face_names)} known faces.")

load_known_faces()

# -----------------------
# FACE RECOGNITION
# -----------------------
def recognize_faces_in_image(image_path):
    image = face_recognition.load_image_file(image_path)
    face_locations = face_recognition.face_locations(image)
    face_encodings = face_recognition.face_encodings(image, face_locations)

    image_cv = cv2.cvtColor(image, cv2.COLOR_RGB2BGR)

    for (top, right, bottom, left), face_encoding in zip(face_locations, face_encodings):
        matches = face_recognition.compare_faces(known_face_encodings, face_encoding)
        name = "Unknown"

        if matches:
            face_distances = face_recognition.face_distance(known_face_encodings, face_encoding)
            best_match_index = np.argmin(face_distances)
            if matches[best_match_index]:
                name = known_face_names[best_match_index]

        cv2.rectangle(image_cv, (left, top), (right, bottom), (0, 255, 0), 2)
        cv2.putText(image_cv, name, (left, top - 10), cv2.FONT_HERSHEY_SIMPLEX, 0.7, (255, 255, 255), 2)

    output_path = os.path.join(RESULTS_DIR, os.path.basename(image_path))
    cv2.imwrite(output_path, image_cv)
    return output_path

# -----------------------
# FLASK APP
# -----------------------
app = Flask(__name__)

HTML_TEMPLATE = """
<!DOCTYPE html>
<html>
<head>
    <title>Face Recognition System</title>
    <style>
        body {
            font-family: Arial, sans-serif;
            background: linear-gradient(to right, #6dd5fa, #2980b9);
            text-align: center;
            padding: 20px;
            color: white;
        }
        h1 {
            margin-bottom: 20px;
        }
        .container {
            display: flex;
            justify-content: space-around;
            flex-wrap: wrap;
        }
        .card {
            background: rgba(255, 255, 255, 0.15);
            padding: 20px;
            margin: 10px;
            border-radius: 10px;
            width: 320px;
            box-shadow: 0px 4px 15px rgba(0,0,0,0.2);
            backdrop-filter: blur(8px);
        }
        input[type="text"], input[type="file"] {
            padding: 8px;
            border-radius: 5px;
            border: none;
            margin: 5px 0;
            width: 90%;
        }
        input[type="submit"] {
            background: #27ae60;
            color: white;
            padding: 10px 18px;
            border: none;
            border-radius: 5px;
            cursor: pointer;
        }
        input[type="submit"]:hover {
            background: #219150;
        }
        img.result {
            margin-top: 20px;
            max-width: 90%;
            border: 3px solid white;
            border-radius: 5px;
        }
        footer {
            margin-top: 40px;
            font-size: 14px;
            opacity: 0.8;
        }
    </style>
</head>
<body>
    <h1>üì∏ Face Recognition Web App</h1>
    <div class="container">
        <div class="card">
            <h2>‚ûï Add New Known Face</h2>
            <form action="/upload_face" method="post" enctype="multipart/form-data">
                <input type="text" name="name" placeholder="Enter Name" required><br>
                <input type="file" name="face_image" accept="image/*" required><br><br>
                <input type="submit" value="Upload Face">
            </form>
        </div>

        <div class="card">
            <h2>üîç Recognize Faces</h2>
            <form action="/recognize" method="post" enctype="multipart/form-data">
                <input type="file" name="image" accept="image/*" required><br><br>
                <input type="submit" value="Recognize Image">
            </form>
        </div>
    </div>

    {% if result_image %}
        <h2>üñº Recognition Result</h2>
        <img class="result" src="{{ url_for('static_result', filename=result_image) }}">
    {% endif %}

    <footer>Made with ‚ù§Ô∏è using Python, Flask & face_recognition</footer>
</body>
</html>
"""

@app.route('/')
def home():
    return render_template_string(HTML_TEMPLATE)

@app.route('/upload_face', methods=['POST'])
def upload_face():
    person_name = request.form['name']
    file = request.files['face_image']
    person_dir = os.path.join(KNOWN_FACES_DIR, person_name)
    os.makedirs(person_dir, exist_ok=True)
    file.save(os.path.join(person_dir, file.filename))
    load_known_faces()
    return redirect(url_for('home'))

@app.route('/recognize', methods=['POST'])
def recognize():
    file = request.files['image']
    file_path = os.path.join(UPLOADS_DIR, file.filename)
    file.save(file_path)
    output_path = recognize_faces_in_image(file_path)
    return render_template_string(HTML_TEMPLATE, result_image=os.path.basename(output_path))

@app.route('/results/<filename>')
def static_result(filename):
    return send_from_directory(RESULTS_DIR, filename)

if __name__ == '__main__':
    print("[INFO] Starting Face Recognition Web App...")
    app.run(host='0.0.0.0', port=5000, debug=True)
